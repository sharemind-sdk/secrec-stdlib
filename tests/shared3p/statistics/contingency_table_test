/*
 * Copyright (C) 2015 Cybernetica
 *
 * Research/Commercial License Usage
 * Licensees holding a valid Research License or Commercial License
 * for the Software may use this file according to the written
 * agreement between you and Cybernetica.
 *
 * GNU Lesser General Public License Usage
 * Alternatively, this file may be used under the terms of the GNU Lesser
 * General Public License version 3 as published by the Free Software
 * Foundation and appearing in the file LICENSE.LGPLv3 included in the
 * packaging of this file.  Please review the following information to
 * ensure the GNU Lesser General Public License version 3 requirements
 * will be met: http://www.gnu.org/licenses/lgpl-3.0.html.
 *
 * For further information, please contact us at sharemind@cyber.ee.
 */
 
import stdlib;
import shared3p;
import shared3p_statistics_common;
import test_utility;

domain pd_shared3p shared3p;

template<type T>
bool contingency_table_test (T data) {
	/*
	if the sum of the input exceeds the maximum 
	value of that data type the function will overflow
	*/
	
	T x = (T)5;
	
	pd_shared3p T[[1]] a (8) = {0, 0, x, 0, 0, x, x, 0};
	
	//cases and controls indicate which column the corresponding input belongs to
	//controls must always be the opposite of cases
	pd_shared3p bool[[1]] cases (8) = {true, true, true, true, false, false, false, false};
	pd_shared3p bool[[1]] controls (8) = !cases;
	
	//the code book indicates which input value belongs to which row in the table
	//rows start at 1
	T[[2]] code_book = reshape ({0, x, 1, 2}, 2, 2);

	//construct the contingency table
	pd_shared3p T[[2]] table = contingencyTable (a, cases, controls, code_book);
	
	//the expected table for compareing the result
	T[[2]] expected_table (2, 2) = reshape ({3, 1, 2, 2}, 2, 2);
	
	//if the recieved table does not match the expected table
	//the test fails
	if (all (expected_table != declassify (table)))
		return false;
	
	return true;
}


void main() {
	string test_prefix = "ContingencyTable";
	test (test_prefix, contingency_table_test (0::uint32), 0::uint32);
	test (test_prefix, contingency_table_test (0::uint64), 0::uint64);
	
	test_report();
}